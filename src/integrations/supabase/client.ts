// This file is automatically generated. Do not edit it directly.
import { createClient } from "@supabase/supabase-js";
import type { Database } from "./types";

const SUPABASE_URL = "https://rppiggskrhysmrlbkfhe.supabase.co";
const SUPABASE_PUBLISHABLE_KEY =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJwcGlnZ3Nrcmh5c21ybGJrZmhlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY0NzQ3NDYsImV4cCI6MjA2MjA1MDc0Nn0.m3DIMXRUHsbSTTsrDwRa9FJi7cHv1Ep1OdaMn6rzfc0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Add ability to use dynamic table names for queries
// We need to use 'any' type to bypass TypeScript's strict checking for dynamic table names
export const fromDynamic = (tableName: string) => {
  if (!tableName) {
    console.error("Table name is required for fromDynamic");
    throw new Error("Table name is required for dynamic query");
  }

  console.log(`Creating dynamic query for table: ${tableName}`);
  return supabase.from(tableName as any);
};

// Define types for the expected data structures from tables
export interface MarketDataSource {
  id?: string;
  country: string;
  stock_market: string;
  asset_class: string;
  stock_table: string;
  created_at?: string | null;
  updated_at?: string | null;
}

export interface StockRecord {
  stock_code: string;
  date: string;
  open: number;
  high: number;
  low: number;
  close: number;
  volume: number;
}
